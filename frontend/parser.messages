prog: VAR
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET UNARY_MINUS
##
## Ends in an error in state: 1.
##
## toplevel -> LET . VAR param_list option(type_annot) EQ expr [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR UNARY_MINUS
##
## Ends in an error in state: 2.
##
## toplevel -> LET VAR . param_list option(type_annot) EQ expr [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR VAR VAR
##
## Ends in an error in state: 3.
##
## param -> VAR . type_annot [ EQ DARROW COMMA COLON ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON UNARY_MINUS
##
## Ends in an error in state: 4.
##
## type_annot -> COLON . type_name [ EQ DARROW COMMA COLON ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN UNARY_MINUS
##
## Ends in an error in state: 6.
##
## type_name -> LPAREN . loption(separated_nonempty_list(COMMA,type_name)) RPAREN ARROW type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN VAR EQ
##
## Ends in an error in state: 7.
##
## separated_nonempty_list(COMMA,type_name) -> type_name . [ RPAREN ]
## separated_nonempty_list(COMMA,type_name) -> type_name . COMMA separated_nonempty_list(COMMA,type_name) [ RPAREN ]
## type_name -> type_name . ARROW type_name [ RPAREN COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN VAR COMMA UNARY_MINUS
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(COMMA,type_name) -> type_name COMMA . separated_nonempty_list(COMMA,type_name) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## type_name COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR ARROW UNARY_MINUS
##
## Ends in an error in state: 10.
##
## type_name -> type_name ARROW . type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## type_name ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR ARROW VAR VAR
##
## Ends in an error in state: 11.
##
## type_name -> type_name . ARROW type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
## type_name -> type_name ARROW type_name . [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## type_name ARROW type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN RPAREN VAR
##
## Ends in an error in state: 14.
##
## type_name -> LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN . ARROW type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN RPAREN ARROW UNARY_MINUS
##
## Ends in an error in state: 15.
##
## type_name -> LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN ARROW . type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON LPAREN RPAREN ARROW VAR VAR
##
## Ends in an error in state: 16.
##
## type_name -> type_name . ARROW type_name [ RPAREN EQ DARROW COMMA COLON ARROW ]
## type_name -> LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN ARROW type_name . [ RPAREN EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,type_name)) RPAREN ARROW type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR RPAREN
##
## Ends in an error in state: 17.
##
## type_annot -> COLON type_name . [ EQ DARROW COMMA COLON ]
## type_name -> type_name . ARROW type_name [ EQ DARROW COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## COLON type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR VAR COLON VAR DARROW
##
## Ends in an error in state: 20.
##
## toplevel -> LET VAR param_list . option(type_annot) EQ expr [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET VAR param_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
## In state 18, spurious reduction of production param -> VAR type_annot
## In state 61, spurious reduction of production separated_nonempty_list(COMMA,param) -> param
## In state 19, spurious reduction of production loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param)
## In state 64, spurious reduction of production param_list -> loption(separated_nonempty_list(COMMA,param))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR COLON VAR DARROW
##
## Ends in an error in state: 22.
##
## toplevel -> LET VAR param_list option(type_annot) . EQ expr [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET VAR param_list option(type_annot)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
## In state 21, spurious reduction of production option(type_annot) -> type_annot
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ TIMES
##
## Ends in an error in state: 23.
##
## toplevel -> LET VAR param_list option(type_annot) EQ . expr [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET VAR param_list option(type_annot) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ UNARY_MINUS TIMES
##
## Ends in an error in state: 25.
##
## expr -> UNARY_MINUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## UNARY_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LPAREN TIMES
##
## Ends in an error in state: 26.
##
## expr -> LPAREN . RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> LPAREN . expr RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET UNARY_MINUS
##
## Ends in an error in state: 28.
##
## expr -> LET . VAR option(type_annot) EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> LET . REC VAR type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR VAR
##
## Ends in an error in state: 29.
##
## expr -> LET VAR . option(type_annot) EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR COLON VAR DARROW
##
## Ends in an error in state: 30.
##
## expr -> LET VAR option(type_annot) . EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
## In state 21, spurious reduction of production option(type_annot) -> type_annot
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR EQ TIMES
##
## Ends in an error in state: 31.
##
## expr -> LET VAR option(type_annot) EQ . expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF TIMES
##
## Ends in an error in state: 34.
##
## expr -> IF . expr THEN expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ FUN UNARY_MINUS
##
## Ends in an error in state: 35.
##
## expr -> FUN . param_list DARROW expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ FUN VAR COLON VAR EQ
##
## Ends in an error in state: 36.
##
## expr -> FUN param_list . DARROW expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN param_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
## In state 18, spurious reduction of production param -> VAR type_annot
## In state 61, spurious reduction of production separated_nonempty_list(COMMA,param) -> param
## In state 19, spurious reduction of production loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param)
## In state 64, spurious reduction of production param_list -> loption(separated_nonempty_list(COMMA,param))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ FUN DARROW TIMES
##
## Ends in an error in state: 37.
##
## expr -> FUN param_list DARROW . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN param_list DARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ FUN DARROW BOOL STRING
##
## Ends in an error in state: 39.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> FUN param_list DARROW expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN param_list DARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL TIMES TIMES
##
## Ends in an error in state: 40.
##
## expr -> expr TIMES . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL TIMES BOOL STRING
##
## Ends in an error in state: 41.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr TIMES expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL PLUS TIMES
##
## Ends in an error in state: 43.
##
## expr -> expr PLUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL PLUS BOOL STRING
##
## Ends in an error in state: 44.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr PLUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL DIV TIMES
##
## Ends in an error in state: 45.
##
## expr -> expr DIV . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL DIV BOOL STRING
##
## Ends in an error in state: 46.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr DIV expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL NE TIMES
##
## Ends in an error in state: 47.
##
## expr -> expr NE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL NE BOOL STRING
##
## Ends in an error in state: 48.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr NE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr NE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL MINUS TIMES
##
## Ends in an error in state: 49.
##
## expr -> expr MINUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL MINUS BOOL STRING
##
## Ends in an error in state: 50.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr MINUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL LT TIMES
##
## Ends in an error in state: 51.
##
## expr -> expr LT . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL LT BOOL STRING
##
## Ends in an error in state: 52.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr LT expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL LE TIMES
##
## Ends in an error in state: 53.
##
## expr -> expr LE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL LE BOOL STRING
##
## Ends in an error in state: 54.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr LE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL GT TIMES
##
## Ends in an error in state: 55.
##
## expr -> expr GT . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL GT BOOL STRING
##
## Ends in an error in state: 56.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr GT expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL GE TIMES
##
## Ends in an error in state: 57.
##
## expr -> expr GE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL GE BOOL STRING
##
## Ends in an error in state: 58.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr GE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL EQ TIMES
##
## Ends in an error in state: 59.
##
## expr -> expr EQ . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL EQ BOOL STRING
##
## Ends in an error in state: 60.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr EQ expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR VAR COLON VAR COMMA UNARY_MINUS
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ EQ DARROW COLON ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF BOOL STRING
##
## Ends in an error in state: 65.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> IF expr . THEN expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF BOOL THEN TIMES
##
## Ends in an error in state: 66.
##
## expr -> IF expr THEN . expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF BOOL THEN BOOL STRING
##
## Ends in an error in state: 67.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> IF expr THEN expr . ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF BOOL THEN BOOL ELSE TIMES
##
## Ends in an error in state: 68.
##
## expr -> IF expr THEN expr ELSE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ IF BOOL THEN BOOL ELSE BOOL STRING
##
## Ends in an error in state: 69.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> IF expr THEN expr ELSE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR EQ BOOL STRING
##
## Ends in an error in state: 70.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> LET VAR option(type_annot) EQ expr . IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR EQ BOOL IN TIMES
##
## Ends in an error in state: 71.
##
## expr -> LET VAR option(type_annot) EQ expr IN . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET VAR EQ BOOL IN BOOL STRING
##
## Ends in an error in state: 72.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> LET VAR option(type_annot) EQ expr IN expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC UNARY_MINUS
##
## Ends in an error in state: 73.
##
## expr -> LET REC . VAR type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR VAR
##
## Ends in an error in state: 74.
##
## expr -> LET REC VAR . type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR COLON VAR DARROW
##
## Ends in an error in state: 75.
##
## expr -> LET REC VAR type_annot . EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR COLON VAR EQ TIMES
##
## Ends in an error in state: 76.
##
## expr -> LET REC VAR type_annot EQ . expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR COLON VAR EQ BOOL STRING
##
## Ends in an error in state: 77.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
## expr -> LET REC VAR type_annot EQ expr . IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR COLON VAR EQ BOOL IN TIMES
##
## Ends in an error in state: 78.
##
## expr -> LET REC VAR type_annot EQ expr IN . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LET REC VAR COLON VAR EQ BOOL IN BOOL STRING
##
## Ends in an error in state: 79.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> LET REC VAR type_annot EQ expr IN expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ LPAREN BOOL STRING
##
## Ends in an error in state: 80.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EQ DIV BOOL ]
## expr -> LPAREN expr . RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ UNARY_MINUS BOOL STRING
##
## Ends in an error in state: 82.
##
## expr -> UNARY_MINUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IN IF GT GE FUN EXTERNAL EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## UNARY_MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL STRING
##
## Ends in an error in state: 83.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT64 INT32 IF GT GE FUN EXTERNAL EQ EOF DIV BOOL ]
## toplevel -> LET VAR param_list option(type_annot) EQ expr . [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## LET VAR param_list option(type_annot) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL UNARY_MINUS
##
## Ends in an error in state: 84.
##
## toplevel -> EXTERNAL . VAR type_annot EQ STRING [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR VAR
##
## Ends in an error in state: 85.
##
## toplevel -> EXTERNAL VAR . type_annot EQ STRING [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## EXTERNAL VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR DARROW
##
## Ends in an error in state: 86.
##
## toplevel -> EXTERNAL VAR type_annot . EQ STRING [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## EXTERNAL VAR type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production type_annot -> COLON type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR EQ VAR
##
## Ends in an error in state: 87.
##
## toplevel -> EXTERNAL VAR type_annot EQ . STRING [ LET EXTERNAL EOF ]
##
## The known suffix of the stack is as follows:
## EXTERNAL VAR type_annot EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EXTERNAL VAR COLON VAR EQ STRING VAR
##
## Ends in an error in state: 89.
##
## list(toplevel) -> toplevel . list(toplevel) [ EOF ]
##
## The known suffix of the stack is as follows:
## toplevel
##

<YOUR SYNTAX ERROR MESSAGE HERE>
