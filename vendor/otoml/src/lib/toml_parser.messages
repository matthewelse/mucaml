toml_ast: KEY DOT TABLE_HEADER_START
# Known ways to trigger it:
# "foo. = 1"
# "[foo.]"

##
## Ends in an error in state: 11.
##
## separated_nonempty_list(DOT,key) -> key DOT . separated_nonempty_list(DOT,key) [ TABLE_HEADER_END TABLE_ARRAY_HEADER_END EQ ]
##
## The known suffix of the stack is as follows:
## key DOT
##

Unexpected '.' in a key.
Examples of valid keys: "value", "table.subtable", "table.subtable.value"

toml_ast: KEY EQ ARRAY_START STRING COMMA TABLE_HEADER_START
# Known ways to trigger it:
# "foo = [3,"

##
## Ends in an error in state: 37.
##
## item_sequence(COMMA,value) -> value COMMA . item_sequence(COMMA,value) [ ARRAY_END ]
##
## The known suffix of the stack is as follows:
## value COMMA
##

Malformed array (missing closing square bracket?)

toml_ast: KEY EQ ARRAY_START STRING TABLE_HEADER_START
# Known ways to trigger it:
# "foo = [3"

##
## Ends in an error in state: 36.
##
## item_sequence(COMMA,value) -> value . [ ARRAY_END ]
## item_sequence(COMMA,value) -> value . COMMA item_sequence(COMMA,value) [ ARRAY_END ]
##
## The known suffix of the stack is as follows:
## value
##

Malformed array (missing closing square bracket?)

toml_ast: KEY EQ ARRAY_START TABLE_HEADER_START
# Known ways to trigger it:
# "foo = ["

##
## Ends in an error in state: 34.
##
## array -> ARRAY_START . ARRAY_END [ RIGHT_BRACE NEWLINE EOF COMMA ARRAY_END ]
## array -> ARRAY_START . item_sequence(COMMA,value) ARRAY_END [ RIGHT_BRACE NEWLINE EOF COMMA ARRAY_END ]
##
## The known suffix of the stack is as follows:
## ARRAY_START
##

Malformed array (missing closing square bracket?)

toml_ast: KEY EQ LEFT_BRACE KEY EQ BOOLEAN COMMA TABLE_HEADER_START
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(COMMA,key_value_pair) -> key_value_pair COMMA . separated_nonempty_list(COMMA,key_value_pair) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## key_value_pair COMMA
##

Invalid syntax (state 29)

toml_ast: KEY EQ LEFT_BRACE KEY EQ BOOLEAN TABLE_HEADER_START
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(COMMA,key_value_pair) -> key_value_pair . [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,key_value_pair) -> key_value_pair . COMMA separated_nonempty_list(COMMA,key_value_pair) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## key_value_pair
##

Invalid syntax (state 28)

toml_ast: KEY EQ LEFT_BRACE TABLE_HEADER_START
##
## Ends in an error in state: 24.
##
## inline_table -> LEFT_BRACE . loption(separated_nonempty_list(COMMA,key_value_pair)) RIGHT_BRACE [ RIGHT_BRACE NEWLINE EOF COMMA ARRAY_END ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACE
##

Malformed inline table (missing closing brace?)

toml_ast: KEY EQ TABLE_HEADER_START
# Not sure why TABLE_HEADER_START is in the stack.
# It seems to be the state entered when a key-value pair is missing a value.
#
# Known ways to trigger it:
# "foo="
# "foo = ]"
# "foo= \n"

##
## Ends in an error in state: 17.
##
## key_value_pair -> table_path EQ . value [ RIGHT_BRACE NEWLINE EOF COMMA ]
##
## The known suffix of the stack is as follows:
## table_path EQ
##

Malformed key-value pair (missing value?)

toml_ast: KEY TABLE_HEADER_END
# Known ways to trigger it:
# "foo]"

##
## Ends in an error in state: 16.
##
## key_value_pair -> table_path . EQ value [ RIGHT_BRACE NEWLINE EOF COMMA ]
##
## The known suffix of the stack is as follows:
## table_path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(DOT,key) -> key
## In state 9, spurious reduction of production table_path -> separated_nonempty_list(DOT,key)
##

Unexpected ']' (missing opening square bracket?)

toml_ast: KEY TABLE_HEADER_START
# Known ways to trigger it:
# "foo["
# "foo={1"

##
## Ends in an error in state: 10.
##
## separated_nonempty_list(DOT,key) -> key . [ TABLE_HEADER_END TABLE_ARRAY_HEADER_END EQ ]
## separated_nonempty_list(DOT,key) -> key . DOT separated_nonempty_list(DOT,key) [ TABLE_HEADER_END TABLE_ARRAY_HEADER_END EQ ]
##
## The known suffix of the stack is as follows:
## key
##

Key is followed by end of file or a malformed TOML construct.

toml_ast: NEWLINE TABLE_HEADER_END
# Known ways to trigger it:
# "\n ]"

##
## Ends in an error in state: 1.
##
## list(NEWLINE) -> NEWLINE . list(NEWLINE) [ TABLE_HEADER_START TABLE_ARRAY_HEADER_START KEY EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

Unexpected ']'

toml_ast: TABLE_ARRAY_HEADER_START KEY TABLE_HEADER_END
# Known ways to trigger it:
# "[[foo]"

##
## Ends in an error in state: 14.
##
## table_array_header -> TABLE_ARRAY_HEADER_START table_path . TABLE_ARRAY_HEADER_END [ NEWLINE EOF ]
##
## The known suffix of the stack is as follows:
## TABLE_ARRAY_HEADER_START table_path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(DOT,key) -> key
## In state 9, spurious reduction of production table_path -> separated_nonempty_list(DOT,key)
##

Missing closing '] in a table array header, or an extra opening '[' in a table header.
Example of a valid table header: [table]
Example of a valid table array header: [[array_of_tables]]


toml_ast: TABLE_ARRAY_HEADER_START TABLE_HEADER_START
##
## Ends in an error in state: 13.
##
## table_array_header -> TABLE_ARRAY_HEADER_START . table_path TABLE_ARRAY_HEADER_END [ NEWLINE EOF ]
##
## The known suffix of the stack is as follows:
## TABLE_ARRAY_HEADER_START
##

Unexpected '[' (too many opening square brackets in a table array header?)

toml_ast: TABLE_HEADER_END
# Known ways to trigger it:
# "\n]"

##
## Ends in an error in state: 0.
##
## toml_ast' -> . toml_ast [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected ']' 

toml_ast: TABLE_HEADER_START KEY TABLE_ARRAY_HEADER_END
# Known ways to trigger it:
# "[foo]]"

##
## Ends in an error in state: 7.
##
## table_header -> TABLE_HEADER_START table_path . TABLE_HEADER_END [ NEWLINE EOF ]
##
## The known suffix of the stack is as follows:
## TABLE_HEADER_START table_path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production separated_nonempty_list(DOT,key) -> key
## In state 9, spurious reduction of production table_path -> separated_nonempty_list(DOT,key)
##

Extra closing ']' in a table header, or a missing opening '[' in a table array header.
Example of a valid table header: [table]
Example of a valid table array header: [[array_of_tables]]

toml_ast: TABLE_HEADER_START KEY TABLE_HEADER_END NEWLINE TABLE_HEADER_END
##
## Ends in an error in state: 46.
##
## nonempty_list(NEWLINE) -> NEWLINE . [ TABLE_HEADER_START TABLE_ARRAY_HEADER_START KEY EOF ]
## nonempty_list(NEWLINE) -> NEWLINE . nonempty_list(NEWLINE) [ TABLE_HEADER_START TABLE_ARRAY_HEADER_START KEY EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

Invalid syntax (state 46).

toml_ast: TABLE_HEADER_START KEY TABLE_HEADER_END TABLE_HEADER_START
# Known ways to trigger it:
# "[foo] ["
# "foo=3}"

##
## Ends in an error in state: 45.
##
## items_on_lines(table_entry) -> table_entry . [ EOF ]
## items_on_lines(table_entry) -> table_entry . nonempty_list(NEWLINE) items_on_lines(table_entry) [ EOF ]
##
## The known suffix of the stack is as follows:
## table_entry
##

Invalid syntax.

toml_ast: TABLE_HEADER_START TABLE_HEADER_START
# Known ways to trigger it:
# "\n]"

##
## Ends in an error in state: 5.
##
## table_header -> TABLE_HEADER_START . table_path TABLE_HEADER_END [ NEWLINE EOF ]
##
## The known suffix of the stack is as follows:
## TABLE_HEADER_START
##

Unexpected table header end.

