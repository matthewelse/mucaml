prog: TIMES
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNARY_MINUS TIMES
##
## Ends in an error in state: 2.
##
## expr -> UNARY_MINUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## UNARY_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN TIMES
##
## Ends in an error in state: 3.
##
## expr -> LPAREN . RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> LPAREN . expr RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET UNARY_MINUS
##
## Ends in an error in state: 5.
##
## expr -> LET . VAR option(type_annot) EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> LET . REC VAR type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET
##

Expected a variable name or `rec` after `let`.

prog: LET VAR VAR
##
## Ends in an error in state: 6.
##
## expr -> LET VAR . option(type_annot) EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON UNARY_MINUS
##
## Ends in an error in state: 7.
##
## type_annot -> COLON . type_name [ EQ DARROW COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON VAR VAR
##
## Ends in an error in state: 9.
##
## type_annot -> COLON type_name . [ EQ DARROW COMMA ]
## type_name -> type_name . ARROW type_name [ EQ DARROW COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## COLON type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON VAR ARROW UNARY_MINUS
##
## Ends in an error in state: 10.
##
## type_name -> type_name ARROW . type_name [ EQ DARROW COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_name ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON VAR ARROW VAR VAR
##
## Ends in an error in state: 11.
##
## type_name -> type_name . ARROW type_name [ EQ DARROW COMMA ARROW ]
## type_name -> type_name ARROW type_name . [ EQ DARROW COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_name ARROW type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR COLON VAR DARROW
##
## Ends in an error in state: 13.
##
## expr -> LET VAR option(type_annot) . EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production type_annot -> COLON type_name
## In state 12, spurious reduction of production option(type_annot) -> type_annot
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ TIMES
##
## Ends in an error in state: 14.
##
## expr -> LET VAR option(type_annot) EQ . expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TIMES
##
## Ends in an error in state: 16.
##
## expr -> IF . expr THEN expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN UNARY_MINUS
##
## Ends in an error in state: 17.
##
## expr -> FUN . param_list DARROW expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR VAR
##
## Ends in an error in state: 18.
##
## param -> VAR . type_annot [ DARROW COMMA ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN DARROW TIMES
##
## Ends in an error in state: 22.
##
## expr -> FUN param_list DARROW . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN param_list DARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN DARROW BOOL REC
##
## Ends in an error in state: 24.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> FUN param_list DARROW expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## FUN param_list DARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL TIMES TIMES
##
## Ends in an error in state: 25.
##
## expr -> expr TIMES . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL TIMES BOOL REC
##
## Ends in an error in state: 26.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr TIMES expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL PLUS TIMES
##
## Ends in an error in state: 28.
##
## expr -> expr PLUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL PLUS BOOL REC
##
## Ends in an error in state: 29.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr PLUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL DIV TIMES
##
## Ends in an error in state: 30.
##
## expr -> expr DIV . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL DIV BOOL REC
##
## Ends in an error in state: 31.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr DIV expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL NE TIMES
##
## Ends in an error in state: 32.
##
## expr -> expr NE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL NE BOOL REC
##
## Ends in an error in state: 33.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr NE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr NE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL MINUS TIMES
##
## Ends in an error in state: 34.
##
## expr -> expr MINUS . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL MINUS BOOL REC
##
## Ends in an error in state: 35.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr MINUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL LT TIMES
##
## Ends in an error in state: 36.
##
## expr -> expr LT . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL LT BOOL REC
##
## Ends in an error in state: 37.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr LT expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL LE TIMES
##
## Ends in an error in state: 38.
##
## expr -> expr LE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL LE BOOL REC
##
## Ends in an error in state: 39.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr LE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL GT TIMES
##
## Ends in an error in state: 40.
##
## expr -> expr GT . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL GT BOOL REC
##
## Ends in an error in state: 41.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr GT expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL GE TIMES
##
## Ends in an error in state: 42.
##
## expr -> expr GE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL GE BOOL REC
##
## Ends in an error in state: 43.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr GE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL EQ TIMES
##
## Ends in an error in state: 44.
##
## expr -> expr EQ . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL EQ BOOL REC
##
## Ends in an error in state: 45.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr EQ expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON VAR EQ
##
## Ends in an error in state: 46.
##
## separated_nonempty_list(COMMA,param) -> param . [ DARROW ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ DARROW ]
##
## The known suffix of the stack is as follows:
## param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production type_annot -> COLON type_name
## In state 19, spurious reduction of production param -> VAR type_annot
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR COLON VAR COMMA UNARY_MINUS
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ DARROW ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF BOOL REC
##
## Ends in an error in state: 50.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> IF expr . THEN expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF BOOL THEN TIMES
##
## Ends in an error in state: 51.
##
## expr -> IF expr THEN . expr ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF BOOL THEN BOOL REC
##
## Ends in an error in state: 52.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
## expr -> IF expr THEN expr . ELSE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF BOOL THEN BOOL ELSE TIMES
##
## Ends in an error in state: 53.
##
## expr -> IF expr THEN expr ELSE . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF BOOL THEN BOOL ELSE BOOL REC
##
## Ends in an error in state: 54.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> IF expr THEN expr ELSE expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL REC
##
## Ends in an error in state: 55.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> LET VAR option(type_annot) EQ expr . IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET VAR EQ BOOL IN TIMES
##
## Ends in an error in state: 56.
##
## expr -> LET VAR option(type_annot) EQ expr IN . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr IN
##

The body of a let expression should be an expression.

prog: LET VAR EQ BOOL IN BOOL REC
##
## Ends in an error in state: 57.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> LET VAR option(type_annot) EQ expr IN expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET VAR option(type_annot) EQ expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC UNARY_MINUS
##
## Ends in an error in state: 58.
##
## expr -> LET REC . VAR type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR VAR
##
## Ends in an error in state: 59.
##
## expr -> LET REC VAR . type_annot EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR COLON VAR DARROW
##
## Ends in an error in state: 60.
##
## expr -> LET REC VAR type_annot . EQ expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production type_annot -> COLON type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR COLON VAR EQ TIMES
##
## Ends in an error in state: 61.
##
## expr -> LET REC VAR type_annot EQ . expr IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR COLON VAR EQ BOOL REC
##
## Ends in an error in state: 62.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
## expr -> LET REC VAR type_annot EQ expr . IN expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR COLON VAR EQ BOOL IN TIMES
##
## Ends in an error in state: 63.
##
## expr -> LET REC VAR type_annot EQ expr IN . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC VAR COLON VAR EQ BOOL IN BOOL REC
##
## Ends in an error in state: 64.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> LET REC VAR type_annot EQ expr IN expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LET REC VAR type_annot EQ expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN BOOL REC
##
## Ends in an error in state: 65.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES RPAREN PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ DIV BOOL ]
## expr -> LPAREN expr . RPAREN [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNARY_MINUS BOOL REC
##
## Ends in an error in state: 67.
##
## expr -> UNARY_MINUS expr . [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES THEN RPAREN PLUS NE MINUS LT LPAREN LET LE INT IN IF GT GE FUN EQ EOF ELSE DIV BOOL ]
##
## The known suffix of the stack is as follows:
## UNARY_MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BOOL REC
##
## Ends in an error in state: 69.
##
## expr -> expr . PLUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . MINUS expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . TIMES expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . DIV expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . EQ expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . NE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . LT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . GT expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . LE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . GE expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## expr -> expr . expr [ VAR UNARY_MINUS TIMES PLUS NE MINUS LT LPAREN LET LE INT IF GT GE FUN EQ EOF DIV BOOL ]
## prog -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

